### Variables
@baseUrl = http://localhost:3000
@contentType = application/json

### Test Data
@specialistId = 40edb153-a9de-47a2-828b-4b369fab0cd5
@tenantId = 6ee64ab5-167d-4164-ae6c-ecd3b5bc9c4d
@overlappingSpecialistId = 4107ef7c-15e1-47ec-820e-892d6bd0f5c0
@overlappingTenantId = d995104d-ada6-40c8-92b7-1396e28d9dd6

### Test 1: Create valid exception
POST {{baseUrl}}/exceptions
Content-Type: {{contentType}}

{
  "date": "2024-01-15",
  "startTime": "09:00:00",
  "endTime": "10:30:00",
  "reason": "Personal appointment",
  "specialistId": "{{specialistId}}",
  "tenantId": "{{tenantId}}"
}

### Test 2: Create exception with invalid time range (start time after end time)
POST {{baseUrl}}/exceptions
Content-Type: {{contentType}}

{
  "date": "2024-01-15",
  "startTime": "14:00:00",
  "endTime": "10:30:00",
  "reason": "Invalid time range test",
  "specialistId": "{{specialistId}}",
  "tenantId": "{{tenantId}}"
}

### Test 3: Create exception without tenant (should fail)
POST {{baseUrl}}/exceptions
Content-Type: {{contentType}}

{
  "date": "2024-01-15",
  "startTime": "11:00:00",
  "endTime": "12:00:00",
  "reason": "Missing tenant test",
  "specialistId": "{{specialistId}}"
}

### Test 4: Create exception with invalid tenant ID
POST {{baseUrl}}/exceptions
Content-Type: {{contentType}}

{
  "date": "2024-01-15",
  "startTime": "13:00:00",
  "endTime": "14:00:00",
  "reason": "Invalid tenant test",
  "specialistId": "{{specialistId}}",
  "tenantId": "invalid-uuid"
}

### Test 5: Create overlapping exception (same specialist, tenant, date, and time)
POST {{baseUrl}}/exceptions
Content-Type: {{contentType}}

{
  "date": "2024-01-15",
  "startTime": "09:15:00",
  "endTime": "10:00:00",
  "reason": "Overlapping exception test",
  "specialistId": "{{specialistId}}",
  "tenantId": "{{tenantId}}"
}

### Test 6: Create non-overlapping exception (different specialist)
POST {{baseUrl}}/exceptions
Content-Type: {{contentType}}

{
  "date": "2024-01-15",
  "startTime": "09:00:00",
  "endTime": "10:30:00",
  "reason": "Different specialist test",
  "specialistId": "{{overlappingSpecialistId}}",
  "tenantId": "{{tenantId}}"
}

### Test 7: Create non-overlapping exception (different tenant)
POST {{baseUrl}}/exceptions
Content-Type: {{contentType}}

{
  "date": "2024-01-15",
  "startTime": "09:00:00",
  "endTime": "10:30:00",
  "reason": "Different tenant test",
  "specialistId": "{{specialistId}}",
  "tenantId": "{{overlappingTenantId}}"
}

### Test 8: Create non-overlapping exception (different date)
POST {{baseUrl}}/exceptions
Content-Type: {{contentType}}

{
  "date": "2024-01-16",
  "startTime": "09:00:00",
  "endTime": "10:30:00",
  "reason": "Different date test",
  "specialistId": "{{specialistId}}",
  "tenantId": "{{tenantId}}"
}

### Test 9: Create exception with missing required fields
POST {{baseUrl}}/exceptions
Content-Type: {{contentType}}

{
  "date": "2024-01-15",
  "reason": "Missing time fields test"
}

### Test 10: Create exception with empty body
POST {{baseUrl}}/exceptions
Content-Type: {{contentType}}

{}

### Test 11: Get all exceptions (to verify created exceptions)
GET {{baseUrl}}/exceptions
Content-Type: {{contentType}}

### Test 12: Get exceptions by specialist
GET {{baseUrl}}/exceptions/specialist/{{specialistId}}
Content-Type: {{contentType}}

### Test 13: Get exceptions by date range
GET {{baseUrl}}/exceptions/date-range?startDate=2024-01-15&endDate=2024-01-16
Content-Type: {{contentType}}
